* Basics

  Add an extra folder to the load path so that emacs has access to the files there. Put extra emacs
  packages and el-files in there.

  #+begin_src emacs-lisp
    (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    (setq load-path (cons "~/.emacs.d/extra-modes" load-path))
    (setq gc-cons-threshold (* 50 1000 1000))
  #+end_src
** elisp functions

   Some useful elisp functions and stuff.
   
   #+begin_src emacs-lisp

     ;; check emacs versions
     (defun emacs-version< (val1)
       (version< emacs-version val1))

     (defun emacs-version<= (val1)
       (version<= emacs-version val1))

     (defun emacs-version= (val1)
       (version= emacs-version val1))

     (defun emacs-version> (val1)
       (not (emacs-version<= val1)))

     (defun emacs-version>= (val1)
       (not (emacs-version< val1)))
   #+end_src

** Basic setup

   Configurations to remove all the extra stuff in default emacs. Disable menu bars and scrollbars,
   enable winner-mode and save-place-mode, turn on relative line numbers.
  
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)            ; Disable startup screen
     (menu-bar-mode -1)                         ; Disable menubar
     (tool-bar-mode -1)                         ; Disable toolbar
     (scroll-bar-mode -1)                       ; Disable visible scrollbar
     (horizontal-scroll-bar-mode -1)            ; Disable visable scrollbar
     (tooltip-mode 0)                           ; Disable tooltips
     (setq use-system-tooltips 0)
     (save-place-mode 1)                        ; Remember where in the file we were
     (delete-selection-mode 1)                  ; Delete the selected text when pasting
     (winner-mode 1)                            ; Remember window configurations
     (setq ring-bell-function 'ignore)          ; Turn off the fucking sound 
     (setq sentence-end-double-space nil)       ; Count one space after a period as the end of a sentence
     (show-paren-mode 1)                        ; Show matching partentheses (needed on 26.3)

     (setq display-line-numbers-type 'relative) ; Use relative line numbers
     (global-display-line-numbers-mode)         ; Always show line numbers
     (setq-default display-line-numbers-width 3); Set width of line numbers to 3 characters

     (setq-default fill-column 100)             ; Set the width of alt-q to 100 characters

     (setq-default indent-tabs-mode nil)        ; Do NOT use tabs when indenting

     (setq mouse-wheel-progressive-speed nil)   ; Disable scroll acceleration
     (if (emacs-version> "28")                  ; set scroll length.
         (setq mouse-wheel-scroll-amount '(3, ((shift) . 1) ((control) . nil))))
   #+end_src

   Unsorted stuff
   
   #+begin_src emacs-lisp

     (setq left-fringe-width 0) ;; remove pixels before line numbers on the left side. 

     (font-lock-add-keywords    ;; add function calls to list of highlighted stuff
      'cpp-mode
      '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

     (setq help-window-select t)
   #+end_src

   Handle the emacs instance.
   
   #+begin_src emacs-lisp
     (defun reload-config()
       (interactive)
       (shell-command "rm ~/.emacs.d/config.el")
       (restart-emacs))

     (defun server-shutdown ()
       "Save buffers, Quit, and Shutdown server"
       (interactive)
       (save-some-buffers)
       (kill-emacs))
   #+end_src

   Set unique buffer names for files with the same name.

   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
   #+end_src

** User and machine info

   Record info about the current machine and user.

   #+begin_src emacs-lisp
     (setq my-name "Eric EkstrÃ¶m")
     (setq my-email "ericekstrm@gmail.com")
     (setq my-machine-name (system-name))
   #+end_src

   Set font size based on the current machine

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 90)
     (pcase my-machine-name
       ("kit" (set-face-attribute 'default nil :height 110))
       ("kube" (set-face-attribute 'default nil :height 90)))
     ;; Set initial window size
     (setq initial-frame-alist '((width . 110) (height . 60)))
   #+end_src

** Profiling

   #+begin_src emacs-lisp
     ;; Use a hook so the message doesn't get clobbered by other messages.
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "Emacs ready in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))

   #+end_src
   
** Backup files

   Move backup files out of the way, and extend the amount of backups created.

   #+begin_src emacs-lisp
     (setq backup-directory-alist `(("." . "~/.emacs.d/backup-files")))
     (setq version-control t     ;; Use version numbers for backups.
	   kept-new-versions 10  ;; Number of newest versions to keep.
	   kept-old-versions 0   ;; Number of oldest versions to keep.
	   delete-old-versions t ;; Don't ask to delete excess backup versions.
	   backup-by-copying t)  ;; Copy all files, don't rename them
     (setq vc-make-backup-files t)
   #+end_src
   
* Packages

  Add the package archives and initialize use-package (only on older
  emacs).

  #+begin_src emacs-lisp
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa")
                             ("gnu" . "https://elpa.gnu.org/packages/")))

    (if (emacs-version< "29.1")
        (progn
          (require 'package)
          (package-initialize)
          (unless package-archive-contents
            (package-refresh-contents))               ; Need to run this manually if use-package is not working
          (unless (package-installed-p 'use-package)
            (package-install 'use-package))           ; Install use-package if not installed
          (require 'use-package)))
  #+end_src

  Also set up the chords package so we can use it in use-package declarations

  #+begin_src emacs-lisp
    (use-package use-package-chords
      :ensure t
      :config (key-chord-mode 1)
      :custom
      (key-chord-two-keys-delay 0.5)
      (key-chord-safety-interval-forward 0.05))
  #+end_src

** Doom-Themes

   #+begin_src emacs-lisp
     (use-package doom-themes
       :ensure t)
     (load-theme 'my t) ;; Load my custom theme
   #+end_src
   
** Evil
   
   Evil mode.
   
   #+begin_src emacs-lisp
     (use-package evil
       :ensure t
       :init
       (evil-mode 1)
       :custom
       (evil-want-integration t)
       (evil-want-keybinding nil)  ; Do not use evils default bindings for extra modes
       (evil-move-cursor-back nil) ; Make 'ijj' not move the cursor back on character.
       (evil-move-beyond-eol t)    ; allow the cursor to rest on the eol, as default emacs does.

       :chords (:map evil-insert-state-map
                     ("jj" . evil-normal-state)
                     ("kk" . evil-normal-state))
       :bind
       ;; Restores tab functionality to normal and visual mode
       (:map evil-normal-state-map
             ("TAB" . indent-for-tab-command))
       (:map evil-visual-state-map
             ("TAB" . indent-for-tab-command))
       )
   #+end_src

*** More settings
   Add resonable evil bindings for more modes.

   #+begin_src emacs-lisp
     (use-package evil-collection
       :ensure t
       :after evil
       :config
       (evil-collection-init '(buff-menu ivy org)))
   #+end_src

   '_' should be part of words in prog-mode.

   #+begin_src emacs-lisp
     ;; Adds '_' to be part of words in prog-mode
     (add-hook 'prog-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
   #+end_src

   Restore redo functionality
   
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :after evil
       :diminish     ; hides the mode from list of minor modes
       :config
       (evil-set-undo-system 'undo-tree)
       (global-undo-tree-mode 1)
       (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-tree-files"))))
   #+end_src
   
*** Extra commands
    
   Adds command ~g c~ to comment out code.

   #+begin_src emacs-lisp
     (use-package evil-commentary
       :ensure t
       :after (evil)
       :diminish ; Hide from list of minor modes
       :config
       (evil-commentary-mode))
   #+end_src

   Adds ~surround~ as a text object with ~s~. For example ~c s ( [~ to replace the
   surrounding parenthesis with square brackets

   #+begin_src emacs-lisp
     (use-package evil-surround
       :ensure t
       :diminish ; Hide from list of minor modes
       :config
       (global-evil-surround-mode 1)
       ;; Add to list of possible surrounding characters
       ;; use non-spaced pairs when surrounding with an opening brace
       (evil--add-to-alist
        evil-surround-pairs-alist
        ?\( '("(" . ")")
        ?\) '("(" . ")")
        ?\{ '("{" . "}")
        ?\} '("{" . "}")
        ?\[ '("[" . "]")
        ?\] '("[" . "]")))
   #+end_src
   
*** Extra text objects

    Add function, class and argument as text objects. Can for example be used as ~daa~ to remove an
    argument, or as ~cif~ to replace the contents of a function body.

   #+begin_src emacs-lisp
     (if (emacs-version>= "29.1")
         (progn
           (use-package tree-sitter
             :ensure t)
           (use-package evil-textobj-tree-sitter
             :ensure t)
           (use-package tree-sitter-langs
             :ensure t)

           (global-tree-sitter-mode t)

           ;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
           ;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`

           (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
           (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))

           (define-key evil-outer-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.outer"))
           (define-key evil-inner-text-objects-map "c" (evil-textobj-tree-sitter-get-textobj "class.inner"))

           (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj "parameter.outer"))
           (define-key evil-inner-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj "parameter.inner"))
           ))
   #+end_src
   
** Ivy

   Better autocomplete in minibuffers.

   #+begin_src emacs-lisp
     (use-package ivy
       :ensure t
       :init
       (ivy-mode 1)
       :bind (:map ivy-minibuffer-map
		   ("TAB" . ivy-alt-done)
		   ("RET" . ivy-alt-done)
		   ("C-k" . ivy-previous-line)
		   ("C-j" . ivy-next-line)
		   :map ivy-switch-buffer-map
		   ("C-k" . ivy-previous-line)
		   ("C-j" . ivy-next-line))
       :custom
       (ivy-initial-inputs-alist nil)                             ; remove the '^' as inital char in buffer
       (ivy-re-builders-alist '((t . ivy--regex-ignore-order))))  ; add some flexibility to ivy search
   #+end_src

   Counsel enables ivy in more situations.

   #+begin_src emacs-lisp
     (use-package counsel
       :ensure t
       :after ivy
       :config
       (counsel-mode))
   #+end_src

   Swiper uses ivy for searching in files

   #+begin_src emacs-lisp
     (use-package swiper
       :ensure t
       :after ivy
       :bind (("C-s" . swiper)))
   #+end_src

   Add more info to some ivy-buffers.
   
   #+begin_src emacs-lisp
     (use-package ivy-rich
       :ensure t
       :config
       ;; Nothing fancy in switch-buffer list. 
       (ivy-rich-set-columns 'ivy-switch-buffer
                             '((ivy-switch-buffer-transformer (:width 0.35))))
       (ivy-rich-mode 1))
   #+end_src
   
** LSP-mode

   Language server protocol.

   #+begin_src emacs-lisp
     (if (emacs-version>= "29.1")
         (use-package lsp-mode
           :ensure t
           :hook
           (c++-mode . lsp-deferred)
           (c-mode . lsp-deferred)
           :commands (lsp lsp-deferred)
           :custom
           (lsp-enable-on-type-formatting nil)
           (lsp-headerline-breadcrumb-enable nil)
           (lsp-diagnostics-provider :none)
           (lsp-eldoc-enable-hover nil)
           :bind ((:map evil-normal-state-map
                        ("gi" . lsp-find-definition)
                        ("gd" . lsp-find-declaration)
                        ("gb" . evil-jump-backward))))
       )
  


   #+end_src
   
** Telephone line

   Set a nice mode line style. [[https://github.com/dbordak/telephone-line][telephone-line]]

   #+begin_src emacs-lisp 
     (use-package telephone-line
       :ensure t
       :config
       (telephone-line-mode 1))
   #+end_src

** Windmove

   Keybindings for moving between open windows.

   #+begin_src emacs-lisp

     (use-package windmove
       :ensure t
       :bind
       ((("M-j" . windmove-down)
         ("M-k" . windmove-up)
         ("M-h" . windmove-left)
         ("M-l" . windmove-right))))
   #+end_src
   
* Modes
** Cook Mode

   #+begin_src emacs-lisp
     (load "cook-mode.el")
   #+end_src
** C++ Mode
   #+begin_src emacs-lisp
     (setq c-default-style "bsd")
     (setq-default c-basic-offset 4)
     (c-set-offset 'innamespace 0)
     ;; c++ mode for .h and .tcc files
     (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
     (add-to-list 'auto-mode-alist '("\\.tcc\\'" . c++-mode))
   #+end_src

   #+begin_src emacs-lisp
     (load "cmake-mode.el")
   #+end_src

   #+begin_src emacs-lisp
       (autoload 'glsl-mode "glsl-mode" nil t)
       (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
   #+end_src
** Latex Mode
   Basic settings for latex.

   #+begin_src emacs-lisp
     ;; set the correct latex mode for tex files.
     (add-to-list 'auto-mode-alist '("\\.tex\\'" . LaTeX-mode))
   #+end_src
*** Scripts

    Create commands to do the most common latex things that usually take a lot of time.

    #+begin_src emacs-lisp
      ;; Insert a beamer frame
      (defun latex-frame ()
        (interactive)
        (insert "\\begin{frame}[fragile, t]{")
        (save-excursion
          (insert "}\n\n\\end{frame}"))
        (evil-insert 1))

      ;; Insert an itemize list
      (defun latex-itemize ()
        (interactive)
        (insert "\\begin{itemize}\n\\item ")
        (save-excursion
          (insert "\n\\end{itemize}"))
        (evil-insert 1)
        (indent-for-tab-command))

      ;; Insert an lstlisting
      (defun latex-lst ()
        (interactive)
        (insert "\\begin{lstlisting}[style=code, gobble=4]\n")
        (save-excursion
          (insert "\n\\end{lstlisting}"))
        (evil-insert 1)
        (indent-for-tab-command))

      ;; Insert beamer columns
      (defun latex-columns ()
        (interactive)
        (insert "\\begin{columns}\n\\column{0.5\\textwidth}\n")
        (save-excursion
          (insert "\n\\column{0.5\\textwidth}\n\\end{columns}"))
        (evil-insert 1)
        (indent-for-tab-command))
    #+end_src
    
** Org Mode
   
   General org-mode settings

   #+begin_src emacs-lisp
     (setq org-log-done 'time)        ; Add 'closed' time to completed TODOs
     (setq calendar-week-start-day 1) ; Week starts on mondays
   #+end_src
   
   When editing code blocks, the new buffer should be created as a split in the current window.
   
   #+BEGIN_src emacs-lisp
     (setq org-src-window-setup 'split-window-below)   ; Does not work in 26.3
   #+end_src

   When hitting Alt-enter in a heading, the content of the current line should not be moved to the
   new heading, and the new heading should be created below all the contents of the current heading.

   #+begin_src emacs-lisp
     (setq org-M-RET-may-split-line nil)
     (setq org-insert-heading-respect-content t)
   #+end_src

   Indent contents in headings
   
   #+begin_src emacs-lisp
     (setq org-adapt-indentation t)
   #+end_src
   
** Text Mode

   Breaks line at 100 characters.

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook #'auto-fill-mode)
     (setq-default fill-column 100)
   #+end_src

* Cleanup

  Clean up after the init process. 
  
  #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 2 1000 1000))   ;; Reset garbage collection threshold

  #+end_src
  
* Useful (built in) commands that would be easy to forget

  | ~C-c \vert~ | Create table in org mode                                    |
  | ~C-c '~     | open (and close) new buffer to edit inline-code in org mode |
  | ~C-c left~  | Move to previous window configuration                       |
  | ~C-c right~ | Move the the next window configuration                      |

* Stuff to do [8%]
** TODO check out Magit (for real)
** TODO check out the emacs package Projectile
** TODO Hydra fÃ¶r att skapa tangentbordkombinationer med en gemensam startknapp?
** TODO see if [[ https://github.com/Somelauw/evil-org-mode][evil-org-mode]] is worth it
** TODO test out org-agenda. Might be nice along with all of these TODOs 
** DONE style mode line
   CLOSED: [2023-04-05 ons 13:58]
   
   Fixed by not fixing it. Its good as is. Maybe want to change appearence of the position thingy.

   ;; (setq mode-line-format
   ;;       (list
   ;;        "%e"
   ;;        mode-line-front-space
   ;;        ;; mode-line-mule-info
   ;;        ;; mode-line-client
   ;;        mode-line-modified
   ;;        mode-line-remote
   ;;        "   "
   ;;        ;; mode-line-frame-identification
   ;;        mode-line-buffer-identification
   ;;        "   "
   ;;        mode-line-position
   ;;        evil-mode-line-tag
   ;;        "  "
   ;;        vc-mode
   ;;        mode-line-modes
   ;;        mode-line-misc-info
   ;;        mode-line-end-spaces))

** TODO config indentation for latex command

   The latex command will not be indented correctly now.

   Ide: use (set-mark) and (indent-region).

** TODO Evil 'b' command?

   http://blog.binchen.org/posts/code-faster-by-extending-emacs-evil-text-object/

** TODO lsp/clangd cant find implementation???
** TODO change color of matching paren to cursor color
** TODO move 'uniquify' to use-package?
** TODO Fixa spell-check

   https://www.emacswiki.org/emacs/FlySpell
   https://stackoverflow.com/questions/27544869/how-do-i-change-ispell-private-dictionary
